using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using App.FrameCore;
using Dapper;

namespace <#=Config.NameSpace#>
{<#
	var modelName = FormatUtil.ToCodeName(Table.Name);
#>
	/// <summary>
    /// <#=modelName#> 数据访问层
    /// </summary>
    public partial class <#=modelName#>Dal : TableDalBase<<#=modelName#>>
    {
		#region 定义

        public <#=modelName#>Dal(IDbConnection dbCon = null) : base(dbCon)
        {
		}

        #endregion

		/// <summary>
        /// 实现抽象基类属性
        /// </summary>
        public override string DataBaseTableName => <#=modelName#>._.DataBaseTableName;

		#region 查询
		<#@include Name="Include_Dal查询.tt"#>
        #endregion

<#
// sql 列名（a_b,ab_cd）
String strSqlColumns = String.Join(",", Table.Columns.Where(p => !p.Identity).Select(s => s.ColumnName));

// sql 参数（@AB,@AbCd）
String strSqlParas = String.Join(",", Table.Columns.Where(p => !p.Identity).Select(s => "@" + FormatUtil.ToCodeName(s.Name)));

// 自增列
IDataColumn IdentityField = Table.Columns.FirstOrDefault(p => p.Identity);

// 主键列表
IEnumerable<IDataColumn> PrimaryKeyFields = Table.Columns.Where(p => p.PrimaryKey);

// 获取自增Value语句
String strSqlLastInsertId = IdentityField == null ? string.Empty : "SELECT LAST_INSERT_ID();";

// sql keyvalue语句（columnname=@CodeName,columnname2=@CodeName2)
String strSqlColKvs = String.Join(",", Table.Columns.Where(p => !p.Identity).Select(s => string.Format("{0}=@{1}", s.ColumnName, FormatUtil.ToCodeName(s.Name))));

// sql 主键的keyvalue语句（columnname=@OriginalCodeName,columnname2=@OriginalCodeName2)
String strSqlKeyKvs = String.Join(" AND ", PrimaryKeyFields.Select(s => string.Format("{0}=@Original{1}", s.ColumnName, FormatUtil.ToCodeName(s.Name))));
String strSqlKeyObj = String.Join(" , ", PrimaryKeyFields.Select(s => string.Format("Original{0} = {1}", FormatUtil.ToCodeName(s.Name),FormatUtil.ToParamName(s.Name))));

// 主键参数（int id,string codeName）
String strKeyParam = String.Join(",", PrimaryKeyFields.Select(s => string.Format("{0} {1}", FormatUtil.ToFieldTypeString(s), FormatUtil.ToParamName(s.Name))));
#>
		#region Add

        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="item">实体</param>
        /// <param name="tran">事务</param>
        /// <returns></returns>
        public virtual int Add(<#=modelName#> item, IDbTransaction tran = null)
        {
            const string format = @"INSERT INTO {0}(<#=strSqlColumns#>) 
				VALUES(<#=strSqlParas#>);
				<#=strSqlLastInsertId#>";

            var sql = string.Format(format, DataBaseTableName);
<#if(IdentityField != null) {#>
			item.<#=FormatUtil.ToCodeName(IdentityField.Name)#> = DbConn.ExecuteScalar<<#=IdentityField.DataType.Name#>>(sql, param: item, transaction: tran);
<#}else{#>
			DbConn.ExecuteScalar(sql, param: item, transaction: tran);
<#}

foreach(IDataColumn Field in Table.Columns.Where(p => p.PrimaryKey))
{
	var fieldName = FormatUtil.ToCodeName(Field.Name);
#>			item.Original<#=fieldName#> = item.<#=fieldName#>;
<#
}#>
            return 1;
        }

        /// <summary>
        /// 批量添加
        /// </summary>
        /// <param name="items">实体列表</param>
        /// <param name="tran">事务</param>
        /// <returns></returns>
        public virtual int Add(IEnumerable<<#=modelName#>> items, IDbTransaction tran = null)
        {
            var count = 0;
            foreach (var item in items)
            {
                Add(item, tran);
                count++;
            }

            return count;
        }

        #endregion

        #region Update

        /// <summary>
        /// 更新（根据原始主键OriginalXXX更新其它字段信息）
        /// </summary>
        /// <param name="item">实体对象</param>
        /// <param name="tran">事务</param>
        /// <returns></returns>
        public virtual int Update(<#=modelName#> item, IDbTransaction tran = null)
        {
            const string format = @"UPDATE {0} 
					SET <#=strSqlColKvs#> 
					WHERE <#=strSqlKeyKvs#>;";

            var sql = string.Format(format, DataBaseTableName);

            return DbConn.Execute(sql, param: item, transaction: tran);
        }

        /// <summary>
        /// 更新（根据原始主键OriginalXXX更新包含的字段列表）
        /// </summary>
        /// <param name="item">仅更新的字段、OriginalXXX字段</param>
        /// <param name="nameList">包含的name列表</param>
        /// <param name="tran">事务</param>
        /// <returns></returns>
        public virtual int Update(<#=modelName#> item, IList<string> nameList, IDbTransaction tran = null)
        {
            if (nameList == null)
            {
                return Update(item, tran);
            }

            var curFieldList = <#=modelName#>._.AllFields.Where(f => nameList.Contains(f.Name) && !f.IsReadonly);
            if (!curFieldList.Any())
            {
                return 0;
            }

            const string format = "UPDATE {0} SET {1} WHERE {2};";

            var setClause = curFieldList.Aggregate(string.Empty,
                (raw, p) => $"{raw},{p.ColumnName}=@{p.Name}",
                last => last.Trim(','));

            var originalKeys = <#=modelName#>._.AllFields.Where(p => p.IsPrimaryKey && p.IsReadonly);
            var whereClause = originalKeys.Aggregate(string.Empty,
                (raw, p) => $"{raw} and {p.ColumnName}=@{p.Name}",
                last => last.Trim().Substring(4));

            var sql = string.Format(format, DataBaseTableName, setClause, whereClause);

            return DbConn.Execute(sql, param: item, transaction: tran);
        }

        /// <summary>
        /// 批量更新
        /// </summary>
        /// <param name="items">实体对象集合</param>
        /// <param name="tran">事务</param>
        /// <returns></returns>
        public virtual int Update(IEnumerable<<#=modelName#>> items, IDbTransaction tran = null)
        {
            var count = 0;
            foreach (var item in items)
            {
                Update(item, tran);
                count++;
            }

            return count;
        }

        #endregion

		#region Remove
		<#@include Name="Include_Dal删除.tt"#>
        #endregion
    }
}